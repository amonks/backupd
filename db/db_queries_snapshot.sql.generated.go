// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: db_queries_snapshot.sql

package db

import (
	"context"
	"database/sql"
)

const destroyLocalSnapshotRange = `-- name: DestroyLocalSnapshotRange :exec
update snapshots
set is_on_local = false,
    local_observed_at = ?
where dataset = ? and created_at >= ? and created_at <= ?
`

type DestroyLocalSnapshotRangeParams struct {
	LocalObservedAt sql.NullInt64
	Dataset         string
	CreatedAt       int64
	CreatedAt_2     int64
}

func (q *Queries) DestroyLocalSnapshotRange(ctx context.Context, arg DestroyLocalSnapshotRangeParams) error {
	_, err := q.db.ExecContext(ctx, destroyLocalSnapshotRange,
		arg.LocalObservedAt,
		arg.Dataset,
		arg.CreatedAt,
		arg.CreatedAt_2,
	)
	return err
}

const destroyRemoteSnapshotRange = `-- name: DestroyRemoteSnapshotRange :exec
update snapshots
set is_on_remote = false,
    remote_observed_at = ?
where dataset = ? and created_at >= ? and created_at <= ?
`

type DestroyRemoteSnapshotRangeParams struct {
	RemoteObservedAt sql.NullInt64
	Dataset          string
	CreatedAt        int64
	CreatedAt_2      int64
}

func (q *Queries) DestroyRemoteSnapshotRange(ctx context.Context, arg DestroyRemoteSnapshotRangeParams) error {
	_, err := q.db.ExecContext(ctx, destroyRemoteSnapshotRange,
		arg.RemoteObservedAt,
		arg.Dataset,
		arg.CreatedAt,
		arg.CreatedAt_2,
	)
	return err
}

const getAllSnapshots = `-- name: GetAllSnapshots :many
select dataset, name, created_at, is_on_local, local_observed_at, is_on_remote, remote_observed_at from snapshots
where dataset = ?
order by created_at asc
`

func (q *Queries) GetAllSnapshots(ctx context.Context, dataset string) ([]*Snapshot, error) {
	rows, err := q.db.QueryContext(ctx, getAllSnapshots, dataset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Snapshot
	for rows.Next() {
		var i Snapshot
		if err := rows.Scan(
			&i.Dataset,
			&i.Name,
			&i.CreatedAt,
			&i.IsOnLocal,
			&i.LocalObservedAt,
			&i.IsOnRemote,
			&i.RemoteObservedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const observeLocalSnapshot = `-- name: ObserveLocalSnapshot :one
insert into snapshots (dataset, name, created_at, is_on_local, local_observed_at)
values (?, ?, ?, ?, ?)
on conflict (dataset, name) do update
  set is_on_local       = excluded.is_on_local,
      local_observed_at = excluded.local_observed_at
returning dataset, name, created_at, is_on_local, local_observed_at, is_on_remote, remote_observed_at
`

type ObserveLocalSnapshotParams struct {
	Dataset         string
	Name            string
	CreatedAt       int64
	IsOnLocal       sql.NullBool
	LocalObservedAt sql.NullInt64
}

func (q *Queries) ObserveLocalSnapshot(ctx context.Context, arg ObserveLocalSnapshotParams) (*Snapshot, error) {
	row := q.db.QueryRowContext(ctx, observeLocalSnapshot,
		arg.Dataset,
		arg.Name,
		arg.CreatedAt,
		arg.IsOnLocal,
		arg.LocalObservedAt,
	)
	var i Snapshot
	err := row.Scan(
		&i.Dataset,
		&i.Name,
		&i.CreatedAt,
		&i.IsOnLocal,
		&i.LocalObservedAt,
		&i.IsOnRemote,
		&i.RemoteObservedAt,
	)
	return &i, err
}

const observeRemoteSnapshot = `-- name: ObserveRemoteSnapshot :one
insert into snapshots (dataset, name, created_at, is_on_remote, remote_observed_at)
values (?, ?, ?, ?, ?)
on conflict (dataset, name) do update
  set is_on_remote       = excluded.is_on_remote,
      remote_observed_at = excluded.remote_observed_at
returning dataset, name, created_at, is_on_local, local_observed_at, is_on_remote, remote_observed_at
`

type ObserveRemoteSnapshotParams struct {
	Dataset          string
	Name             string
	CreatedAt        int64
	IsOnRemote       sql.NullBool
	RemoteObservedAt sql.NullInt64
}

func (q *Queries) ObserveRemoteSnapshot(ctx context.Context, arg ObserveRemoteSnapshotParams) (*Snapshot, error) {
	row := q.db.QueryRowContext(ctx, observeRemoteSnapshot,
		arg.Dataset,
		arg.Name,
		arg.CreatedAt,
		arg.IsOnRemote,
		arg.RemoteObservedAt,
	)
	var i Snapshot
	err := row.Scan(
		&i.Dataset,
		&i.Name,
		&i.CreatedAt,
		&i.IsOnLocal,
		&i.LocalObservedAt,
		&i.IsOnRemote,
		&i.RemoteObservedAt,
	)
	return &i, err
}

const removeOlderLocalSnapshots = `-- name: RemoveOlderLocalSnapshots :exec
update snapshots
set local_observed_at = unixepoch(),
    is_on_local = false
where dataset = ?
  and local_observed_at < ?
`

type RemoveOlderLocalSnapshotsParams struct {
	Dataset         string
	LocalObservedAt sql.NullInt64
}

func (q *Queries) RemoveOlderLocalSnapshots(ctx context.Context, arg RemoveOlderLocalSnapshotsParams) error {
	_, err := q.db.ExecContext(ctx, removeOlderLocalSnapshots, arg.Dataset, arg.LocalObservedAt)
	return err
}

const removeOlderRemoteSnapshots = `-- name: RemoveOlderRemoteSnapshots :exec
update snapshots
set remote_observed_at = unixepoch(),
    is_on_remote = false
where dataset = ?
  and remote_observed_at < ?
`

type RemoveOlderRemoteSnapshotsParams struct {
	Dataset          string
	RemoteObservedAt sql.NullInt64
}

func (q *Queries) RemoveOlderRemoteSnapshots(ctx context.Context, arg RemoveOlderRemoteSnapshotsParams) error {
	_, err := q.db.ExecContext(ctx, removeOlderRemoteSnapshots, arg.Dataset, arg.RemoteObservedAt)
	return err
}
