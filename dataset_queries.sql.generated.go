// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dataset_queries.sql

package main

import (
	"context"
	"database/sql"
)

const getAllDatasets = `-- name: GetAllDatasets :many
select name, is_on_local, local_observed_at, is_on_remote, remote_observed_at from datasets
`

func (q *Queries) GetAllDatasets(ctx context.Context) ([]*Dataset, error) {
	rows, err := q.db.QueryContext(ctx, getAllDatasets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.Name,
			&i.IsOnLocal,
			&i.LocalObservedAt,
			&i.IsOnRemote,
			&i.RemoteObservedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDataset = `-- name: GetDataset :one
select name, is_on_local, local_observed_at, is_on_remote, remote_observed_at from datasets where name = ?
`

func (q *Queries) GetDataset(ctx context.Context, name string) (*Dataset, error) {
	row := q.db.QueryRowContext(ctx, getDataset, name)
	var i Dataset
	err := row.Scan(
		&i.Name,
		&i.IsOnLocal,
		&i.LocalObservedAt,
		&i.IsOnRemote,
		&i.RemoteObservedAt,
	)
	return &i, err
}

const getLocalDatasets = `-- name: GetLocalDatasets :many
select name, is_on_local, local_observed_at, is_on_remote, remote_observed_at from datasets where is_on_local = true
`

func (q *Queries) GetLocalDatasets(ctx context.Context) ([]*Dataset, error) {
	rows, err := q.db.QueryContext(ctx, getLocalDatasets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.Name,
			&i.IsOnLocal,
			&i.LocalObservedAt,
			&i.IsOnRemote,
			&i.RemoteObservedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRemoteDatasets = `-- name: GetRemoteDatasets :many
select name, is_on_local, local_observed_at, is_on_remote, remote_observed_at from datasets where is_on_remote = true
`

func (q *Queries) GetRemoteDatasets(ctx context.Context) ([]*Dataset, error) {
	rows, err := q.db.QueryContext(ctx, getRemoteDatasets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.Name,
			&i.IsOnLocal,
			&i.LocalObservedAt,
			&i.IsOnRemote,
			&i.RemoteObservedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const observeLocalDataset = `-- name: ObserveLocalDataset :one
insert into datasets (name, is_on_local, local_observed_at)
values (?, ?, unixepoch())
on conflict (name) do update
  set is_on_local       = excluded.is_on_local,
      local_observed_at = excluded.local_observed_at
returning name, is_on_local, local_observed_at, is_on_remote, remote_observed_at
`

type ObserveLocalDatasetParams struct {
	Name      string
	IsOnLocal sql.NullBool
}

func (q *Queries) ObserveLocalDataset(ctx context.Context, arg ObserveLocalDatasetParams) (*Dataset, error) {
	row := q.db.QueryRowContext(ctx, observeLocalDataset, arg.Name, arg.IsOnLocal)
	var i Dataset
	err := row.Scan(
		&i.Name,
		&i.IsOnLocal,
		&i.LocalObservedAt,
		&i.IsOnRemote,
		&i.RemoteObservedAt,
	)
	return &i, err
}

const observeRemoteDataset = `-- name: ObserveRemoteDataset :one
insert into datasets (name, is_on_remote, remote_observed_at)
values (?, ?, unixepoch())
on conflict (name) do update
  set is_on_remote       = excluded.is_on_remote,
      remote_observed_at = excluded.remote_observed_at
returning name, is_on_local, local_observed_at, is_on_remote, remote_observed_at
`

type ObserveRemoteDatasetParams struct {
	Name       string
	IsOnRemote sql.NullBool
}

func (q *Queries) ObserveRemoteDataset(ctx context.Context, arg ObserveRemoteDatasetParams) (*Dataset, error) {
	row := q.db.QueryRowContext(ctx, observeRemoteDataset, arg.Name, arg.IsOnRemote)
	var i Dataset
	err := row.Scan(
		&i.Name,
		&i.IsOnLocal,
		&i.LocalObservedAt,
		&i.IsOnRemote,
		&i.RemoteObservedAt,
	)
	return &i, err
}

const removeOlderLocalDatasets = `-- name: RemoveOlderLocalDatasets :exec
update datasets
set local_observed_at = unixepoch(),
    is_on_local = false
where local_observed_at < ?
`

func (q *Queries) RemoveOlderLocalDatasets(ctx context.Context, localObservedAt sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, removeOlderLocalDatasets, localObservedAt)
	return err
}

const removeOlderRemoteDatasets = `-- name: RemoveOlderRemoteDatasets :exec
update datasets
set remote_observed_at = unixepoch(),
    is_on_remote = false
where remote_observed_at < ?
`

func (q *Queries) RemoveOlderRemoteDatasets(ctx context.Context, remoteObservedAt sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, removeOlderRemoteDatasets, remoteObservedAt)
	return err
}
